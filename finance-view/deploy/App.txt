<!DOCTYPE html>
<html>
<head>
    <title>TimeSheet Finance Report</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Feb 10 2016 11:00:37 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Feb 10 2016 11:00:37 GMT-0800 (PST)";
        var CHECKSUM = 226278252121;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/* Blob.js
 * A Blob implementation.
 * 2014-05-31
 * 
 * By Eli Grey, http://eligrey.com
 * By Devin Samarin, https://github.com/eboyjr
 * License: X11/MIT
 *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md
 */

/*global self, unescape */
/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
  plusplus: true */

/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */

(function (view) {
    "use strict";

    view.URL = view.URL || view.webkitURL;

    if (view.Blob && view.URL) {
        try {
            new Blob;
            return;
        } catch (e) {}
    }

    // Internally we use a BlobBuilder implementation to base Blob off of
    // in order to support older browsers that only have BlobBuilder
    var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {
        var
              get_class = function(object) {
                return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
            }
            , FakeBlobBuilder = function BlobBuilder() {
                this.data = [];
            }
            , FakeBlob = function Blob(data, type, encoding) {
                this.data = data;
                this.size = data.length;
                this.type = type;
                this.encoding = encoding;
            }
            , FBB_proto = FakeBlobBuilder.prototype
            , FB_proto = FakeBlob.prototype
            , FileReaderSync = view.FileReaderSync
            , FileException = function(type) {
                this.code = this[this.name = type];
            }
            , file_ex_codes = (
                  "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR "
                + "NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR"
            ).split(" ")
            , file_ex_code = file_ex_codes.length
            , real_URL = view.URL || view.webkitURL || view
            , real_create_object_URL = real_URL.createObjectURL
            , real_revoke_object_URL = real_URL.revokeObjectURL
            , URL = real_URL
            , btoa = view.btoa
            , atob = view.atob
            
            , ArrayBuffer = view.ArrayBuffer
            , Uint8Array = view.Uint8Array
        ;
        FakeBlob.fake = FB_proto.fake = true;
        while (file_ex_code--) {
            FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;
        }
        if (!real_URL.createObjectURL) {
            URL = view.URL = {};
        }
        URL.createObjectURL = function(blob) {
            var
                  type = blob.type
                , data_URI_header
            ;
            if (type === null) {
                type = "application/octet-stream";
            }
            if (blob instanceof FakeBlob) {
                data_URI_header = "data:" + type;
                if (blob.encoding === "base64") {
                    return data_URI_header + ";base64," + blob.data;
                } else if (blob.encoding === "URI") {
                    return data_URI_header + "," + decodeURIComponent(blob.data);
                } if (btoa) {
                    return data_URI_header + ";base64," + btoa(blob.data);
                } else {
                    return data_URI_header + "," + encodeURIComponent(blob.data);
                }
            } else if (real_create_object_URL) {
                return real_create_object_URL.call(real_URL, blob);
            }
        };
        URL.revokeObjectURL = function(object_URL) {
            if (object_URL.substring(0, 5) !== "data:" && real_revoke_object_URL) {
                real_revoke_object_URL.call(real_URL, object_URL);
            }
        };
        FBB_proto.append = function(data/*, endings*/) {
            var bb = this.data;
            // decode data to a binary string
            if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {
                var
                      str = ""
                    , buf = new Uint8Array(data)
                    , i = 0
                    , buf_len = buf.length
                ;
                for (; i < buf_len; i++) {
                    str += String.fromCharCode(buf[i]);
                }
                bb.push(str);
            } else if (get_class(data) === "Blob" || get_class(data) === "File") {
                if (FileReaderSync) {
                    var fr = new FileReaderSync;
                    bb.push(fr.readAsBinaryString(data));
                } else {
                    // async FileReader won't work as BlobBuilder is sync
                    throw new FileException("NOT_READABLE_ERR");
                }
            } else if (data instanceof FakeBlob) {
                if (data.encoding === "base64" && atob) {
                    bb.push(atob(data.data));
                } else if (data.encoding === "URI") {
                    bb.push(decodeURIComponent(data.data));
                } else if (data.encoding === "raw") {
                    bb.push(data.data);
                }
            } else {
                if (typeof data !== "string") {
                    data += ""; // convert unsupported types to strings
                }
                // decode UTF-16 to binary string
                bb.push(unescape(encodeURIComponent(data)));
            }
        };
        FBB_proto.getBlob = function(type) {
            if (!arguments.length) {
                type = null;
            }
            return new FakeBlob(this.data.join(""), type, "raw");
        };
        FBB_proto.toString = function() {
            return "[object BlobBuilder]";
        };
        FB_proto.slice = function(start, end, type) {
            var args = arguments.length;
            if (args < 3) {
                type = null;
            }
            return new FakeBlob(
                  this.data.slice(start, args > 1 ? end : this.data.length)
                , type
                , this.encoding
            );
        };
        FB_proto.toString = function() {
            return "[object Blob]";
        };
        FB_proto.close = function() {
            this.size = 0;
            delete this.data;
        };
        return FakeBlobBuilder;
    }(view));

    view.Blob = function Blob(blobParts, options) {
        var type = options ? (options.type || "") : "";
        var builder = new BlobBuilder();
        if (blobParts) {
            for (var i = 0, len = blobParts.length; i < len; i++) {
                builder.append(blobParts[i]);
            }
        }
        return builder.getBlob(type);
    };
}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content || this));
/* FileSaver.js
 *  A saveAs() FileSaver implementation.
 *  2014-05-27
 *
 *  By Eli Grey, http://eligrey.com
 *  License: X11/MIT
 *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
    "use strict";
    // IE <10 is explicitly unsupported
    if (typeof navigator !== "undefined" &&
        /MSIE [1-9]\./.test(navigator.userAgent)) {
        return;
    }
    var
          doc = view.document
          // only get URL when necessary in case Blob.js hasn't overridden it yet
        , get_URL = function() {
            return view.URL || view.webkitURL || view;
        }
        , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
        , can_use_save_link = !view.externalHost && "download" in save_link
        , click = function(node) {
            var event = doc.createEvent("MouseEvents");
            event.initMouseEvent(
                "click", true, false, view, 0, 0, 0, 0, 0
                , false, false, false, false, 0, null
            );
            node.dispatchEvent(event);
        }
        , webkit_req_fs = view.webkitRequestFileSystem
        , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
        , throw_outside = function(ex) {
            (view.setImmediate || view.setTimeout)(function() {
                throw ex;
            }, 0);
        }
        , force_saveable_type = "application/octet-stream"
        , fs_min_size = 0
        , deletion_queue = []
        , process_deletion_queue = function() {
            var i = deletion_queue.length;
            while (i--) {
                var file = deletion_queue[i];
                if (typeof file === "string") { // file is an object URL
                    get_URL().revokeObjectURL(file);
                } else { // file is a File
                    file.remove();
                }
            }
            deletion_queue.length = 0; // clear queue
        }
        , dispatch = function(filesaver, event_types, event) {
            event_types = [].concat(event_types);
            var i = event_types.length;
            while (i--) {
                var listener = filesaver["on" + event_types[i]];
                if (typeof listener === "function") {
                    try {
                        listener.call(filesaver, event || filesaver);
                    } catch (ex) {
                        throw_outside(ex);
                    }
                }
            }
        }
        , FileSaver = function(blob, name) {
            // First try a.download, then web filesystem, then object URLs
            var
                  filesaver = this
                , type = blob.type
                , blob_changed = false
                , object_url
                , target_view
                , get_object_url = function() {
                    var object_url = get_URL().createObjectURL(blob);
                    deletion_queue.push(object_url);
                    return object_url;
                }
                , dispatch_all = function() {
                    dispatch(filesaver, "writestart progress write writeend".split(" "));
                }
                // on any filesys errors revert to saving with object URLs
                , fs_error = function() {
                    // don't create more object URLs than needed
                    if (blob_changed || !object_url) {
                        object_url = get_object_url(blob);
                    }
                    if (target_view) {
                        target_view.location.href = object_url;
                    } else {
                        window.open(object_url, "_blank");
                    }
                    filesaver.readyState = filesaver.DONE;
                    dispatch_all();
                }
                , abortable = function(func) {
                    return function() {
                        if (filesaver.readyState !== filesaver.DONE) {
                            return func.apply(this, arguments);
                        }
                    };
                }
                , create_if_not_found = {create: true, exclusive: false}
                , slice
            ;
            filesaver.readyState = filesaver.INIT;
            if (!name) {
                name = "download";
            }
            if (can_use_save_link) {
                object_url = get_object_url(blob);
                save_link.href = object_url;
                save_link.download = name;
                click(save_link);
                filesaver.readyState = filesaver.DONE;
                dispatch_all();
                return;
            }
            // Object and web filesystem URLs have a problem saving in Google Chrome when
            // viewed in a tab, so I force save with application/octet-stream
            // http://code.google.com/p/chromium/issues/detail?id=91158
            if (view.chrome && type && type !== force_saveable_type) {
                slice = blob.slice || blob.webkitSlice;
                blob = slice.call(blob, 0, blob.size, force_saveable_type);
                blob_changed = true;
            }
            // Since I can't be sure that the guessed media type will trigger a download
            // in WebKit, I append .download to the filename.
            // https://bugs.webkit.org/show_bug.cgi?id=65440
            if (webkit_req_fs && name !== "download") {
                name += ".download";
            }
            if (type === force_saveable_type || webkit_req_fs) {
                target_view = view;
            }
            if (!req_fs) {
                fs_error();
                return;
            }
            fs_min_size += blob.size;
            req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                    var save = function() {
                        dir.getFile(name, create_if_not_found, abortable(function(file) {
                            file.createWriter(abortable(function(writer) {
                                writer.onwriteend = function(event) {
                                    target_view.location.href = file.toURL();
                                    deletion_queue.push(file);
                                    filesaver.readyState = filesaver.DONE;
                                    dispatch(filesaver, "writeend", event);
                                };
                                writer.onerror = function() {
                                    var error = writer.error;
                                    if (error.code !== error.ABORT_ERR) {
                                        fs_error();
                                    }
                                };
                                "writestart progress write abort".split(" ").forEach(function(event) {
                                    writer["on" + event] = filesaver["on" + event];
                                });
                                writer.write(blob);
                                filesaver.abort = function() {
                                    writer.abort();
                                    filesaver.readyState = filesaver.DONE;
                                };
                                filesaver.readyState = filesaver.WRITING;
                            }), fs_error);
                        }), fs_error);
                    };
                    dir.getFile(name, {create: false}, abortable(function(file) {
                        // delete file if it already exists
                        file.remove();
                        save();
                    }), abortable(function(ex) {
                        if (ex.code === ex.NOT_FOUND_ERR) {
                            save();
                        } else {
                            fs_error();
                        }
                    }));
                }), fs_error);
            }), fs_error);
        }
        , FS_proto = FileSaver.prototype
        , saveAs = function(blob, name) {
            return new FileSaver(blob, name);
        }
    ;
    FS_proto.abort = function() {
        var filesaver = this;
        filesaver.readyState = filesaver.DONE;
        dispatch(filesaver, "abort");
    };
    FS_proto.readyState = FS_proto.INIT = 0;
    FS_proto.WRITING = 1;
    FS_proto.DONE = 2;

    FS_proto.error =
    FS_proto.onwritestart =
    FS_proto.onprogress =
    FS_proto.onwrite =
    FS_proto.onabort =
    FS_proto.onerror =
    FS_proto.onwriteend =
        null;

    view.addEventListener("unload", process_deletion_queue, false);
    saveAs.unload = function() {
        process_deletion_queue();
        view.removeEventListener("unload", process_deletion_queue, false);
    };
    return saveAs;
}(
       typeof self !== "undefined" && self
    || typeof window !== "undefined" && window
    || this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module !== null) {
  module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
  define([], function() {
    return saveAs;
  });
}
Ext.define('TSUtilities', {
    singleton: true,
    
    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadWsapiRecordsWithParallelPages: function(config) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var count_check_config = Ext.clone(config);
        count_check_config.limit = 1;
        count_check_config.pageSize = 1;
        
        this.loadWsapiRecords(count_check_config, true).then({
            success: function(operation) {
                console.log('operation',operation);
                
                config.pageSize = 200;
                config.limit = config.pageSize;
                var total = operation.resultSet.totalRecords;
                var page_count = Math.ceil(total/config.pageSize);
                    
                var promises = [];
                Ext.Array.each(_.range(1,page_count+1), function(page_index) {
                    var config_clone = Ext.clone(config);
                    config_clone.currentPage = page_index;
                    promises.push(function() { 
                        return me.loadWsapiRecords(config_clone); 
                    });
                });
                CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
                        success: function(results){
                            deferred.resolve( Ext.Array.flatten(results) );
                        },
                        failure: function(msg) {
                            deferred.reject(msg);
                        }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    
    getEditableProjectForCurrentUser: function() {
        var app = Rally.getApp();
        if ( this._currentUserCanWrite() ) {
            return app.getContext().getProjectRef();
        }
        
        var workspace_oid = this._getOidFromRef( app.getContext().getWorkspaceRef());
        
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( Ext.isEmpty(permission.Workspace) ) {
                return false;
            }
            var permission_oid = this._getOidFromRef(permission.Workspace);

            //console.log('comparing ', workspace_oid, permission_oid, permission);
            if (workspace_oid  !=  permission_oid) {
                return false;
            }
                        
            return ( permission.Role == "Editor" || permission.Role == "ProjectAdmin");
        },this);
        
        
        if ( editor_permissions.length > 0 ) {
            return editor_permissions[0]._ref;
        }
        return false;
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1];
    },
    
    // true if sub or workspace admin
    currentUserIsAdmin: function(){
        var app = Rally.getApp();
        
        if ( app.getContext().getUser().SubscriptionAdmin ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var is_workspace_admin = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    is_workspace_admin = true;
                }
            });
        }
        
        return is_workspace_admin;
    },
    
    _currentUserCanWrite: function() {
        var app = Rally.getApp();
        
        //console.log('_currentUserCanWrite',app.getContext().getUser(), app.getContext().getUser().SubscriptionAdmin);
        if ( app.getContext().getUser().SubscriptionAdmin ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var can_unlock = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    can_unlock = true;
                }
            });
        }
        
        return can_unlock;
    },
    
    _currentUserCanUnapprove: function() {
        return this.currentUserIsAdmin();
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.techservices.promise.ParallelThrottle',{
    requires: ['Deft.promise.Promise'],
    statics: {

        throttle: function (fns, maxParallelCalls, scope) {

            if (maxParallelCalls <= 0 || fns.length < maxParallelCalls){
                return Deft.promise.Chain.parallel(fns, scope);
            }


            var parallelFns = [],
                fnChunks = [],
                idx = -1;

            for (var i = 0; i < fns.length; i++) {
                if (i % maxParallelCalls === 0) {
                    idx++;
                    fnChunks[idx] = [];
                }
                fnChunks[idx].push(fns[i]);
            }

            _.each(fnChunks, function (chunk) {
                parallelFns.push(function () {
                    return Deft.promise.Chain.parallel(chunk, scope);
                });
            });

            return Deft.Promise.reduce(parallelFns, function(groupResults, fnGroup) {
                return Deft.Promise.when(fnGroup.call(scope)).then(function(results) {
                    groupResults = groupResults.concat(results || []);
                    return groupResults;
                });
            }, []);
        }
    }
});
Ext.define('TSDateUtils', {
    singleton: true,
    
    getBeginningOfWeekForLocalDate: function(week_date) {
        var start_of_week_here = Ext.Date.add(week_date, Ext.Date.DAY, -1 * week_date.getDay());
        return start_of_week_here;
    },
    
    getBeginningOfWeekISOForLocalDate: function(week_date,showShiftedTimeStamp) {
        var offset = week_date.getTimezoneOffset();  // 480 is pacific, -330 is india

        var local_beginning = TSDateUtils.getBeginningOfWeekForLocalDate(week_date);
        var shifted_time = Rally.util.DateTime.add(week_date,'minute',offset);
                
        if ( shifted_time.getDay() === 0 || shifted_time.getHours() === 0  ) {
            // this is already the beginning of the week
            var shifted_string = this.formatShiftedDate(week_date, 'Y-m-d');
            if ( showShiftedTimeStamp ) {
                return shifted_string + 'T00:00:00.0Z';
            }
            return shifted_string;
        }
        
        if (showShiftedTimeStamp) {
            return Rally.util.DateTime.toIsoString(local_beginning).replace(/T.*$/,'T00:00:00.0Z');
        }
        
        return Rally.util.DateTime.toIsoString(local_beginning).replace(/T.*$/,'');
    },
    
    formatShiftedDate: function(jsdate,format) {
        var offset = jsdate.getTimezoneOffset();  // 480 is pacific, -330 is india

        if ( offset > 0 ) {
            jsdate = Rally.util.DateTime.add(jsdate,'minute',offset);
        }

        return Ext.util.Format.date(jsdate,format);
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    saveCSVToFile:function(csv,file_name,type_object){
            if (type_object == undefined){
                type_object = {type:'text/csv;charset=utf-8'};
            }
            var blob = new Blob([csv],type_object);
            saveAs(blob,file_name);
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var store = grid.getStore();
        
        var csv = [];

        if ( !skip_headers ) {
            csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        }
        var number_of_records = store.getTotalCount();
        this.logger.log("Store:", store);
        this.logger.log("Number of records to export:", number_of_records);
        
        for (var i = 0; i < number_of_records; i++) {
            var record = store.getAt(i);
            if ( ! record ) {
                return;
            }
            csv.push( this._getCSVFromRecord(record, grid, store) );
        }
        
        this.logger.log("Number or lines in CSV:", csv.length);
        return csv.join('\r\n');
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype != 'rallyrowactioncolumn'  && column.xtype != 'tsrowactioncolumn') {
                if (column.dataIndex) {
                    var column_name = column.dataIndex;
                    
                    var display_value = record.get(column_name);

                    if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                        if (column.exportRenderer) {
                            display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                        } else {
                            display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                        }
                    }
                    node_values.push(display_value);
                } else {
                    var display_value = null;
                    if (!column._csvIgnoreRender && column.renderer) {
                        if (column.exportRenderer) {
                            display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                        } else {
                            display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                        }
                        node_values.push(display_value);
                    }
                }

            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
Ext.define('Rally.technicalservices.CommentDialog',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tscommentdialog',

    height: 400,
    width: 600,
    layout: 'fit',
    closable: true,
    draggable: true,
    
    config: {
        title: 'Timesheet Comments',
        
        keyPrefix: null,
        
        preferences: null,
        
        defaultFocus: 'comment_field'
    },

    constructor: function(config) {
        this.mergeConfig(config);

        if ( Ext.isEmpty(this.config.keyPrefix) ) {
            throw "keyPrefix is required for the Comment Dialog";
        }
        
        if ( !Ext.isArray(this.config.preferences) ) {
            throw "preferences is required for the Comment Dialog";
        }
        
        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event commentAdded
             * Fires when user posts a new comment
             * @param {Rally.technicalservices.CommentDialog} source the dialog
             * @param {Ext.data.Model} new post comment
             */
            'commentAdded',
            /**
             * @event commentRemoved
             * Fires when user removes a new comment
             * @param {Rally.technicalservices.CommentDialog} source the dialog
             * @param {Ext.data.Model} old post comment
             */
            'commentRemoved'
        );
    },

    beforeRender: function() {
        this.callParent(arguments);
        
       this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: 'Close',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });
        
        this.addDocked({
            xtype: 'toolbar',
            itemId: 'add_box',
            dock: 'top',
            border: false,
            padding: 2,
            items: this._getAddBoxItems()
        });
        
        this.buildGrid();
    },

    _getColumns: function() {
        var columns = [];
        var can_delete = TSUtilities.currentUserIsAdmin();

        if ( can_delete ) {
            columns.push({
                xtype: 'tscommentrowactioncolumn',
                rowActionsFn: function(record,view) {
                    return [
                        {
                            text: 'Remove', 
                            record: record, 
                            view: view,
                            handler: function(){
                                var item = this.record;
                                var pref = this.record.get('Preference');
                                
                                if ( pref ) {
                                    if ( this.view && this.view.getStore() ) {
                                        this.view.getStore().remove(item);
                                        this.view.getStore().fireEvent('recordRemoved',this.view.getStore(), item);
                                    }
                                    pref.destroy();
                                }
                            }}
                    ]
                }
            });
        }
            
        return Ext.Array.push(columns,[
            {dataIndex: 'User', text:'User'},
            {dataIndex: 'Comment', text:'Comment', flex: 1},
            {dataIndex: 'CreationDate', text: 'Posted', renderer: function(value) { 
                return Ext.util.Format.date(value,'n/j/Y, g:i a')}
            }
        ]);
    },
    
    buildGrid: function() {
        if (this.grid) {
            this.grid.destroy();
        }

        var me = this;

        var data = Ext.Array.map(this.preferences, function(preference){
            var value = Ext.JSON.decode( preference.get("Value") );
            return {
                Comment: value.text,
                User: value.user._refObjectName,
                CreationDate: preference.get('CreationDate'),
                Preference: preference
            };
        });
                
        var store = Ext.create('Rally.data.custom.Store',{
            data: data,
            sorters: [{property:'CreationDate', direction:'DESC'}],
            listeners: {
                scope: this, 
                recordRemoved: function(store, record) {
                    this.fireEvent('commentRemoved', this, record.get('Preference'));
                }
            }
        });
        
        this.grid = Ext.create('Rally.ui.grid.Grid', {
            columnCfgs: this._getColumns(),
            enableEditing: false,
            enableColumnHide: false,
            enableColumnMove: false,
            showRowActionsColumn: false,
            showPagingToolbar: false,
            store: store
        });

        this.add(this.grid);
    },
    
    _getAddBoxItems: function() {
        var can_post = TSUtilities.getEditableProjectForCurrentUser();

        var tooltip_text = "Posting requires Edit rights in at least one project";
        
        if ( can_post !== false && !Ext.isEmpty( can_post )) {
            can_post = true;
            tooltip_text = "Submit Comment";
        }
        
        return [
        {
            xtype: 'rallytextfield',
            itemId: 'comment_field',
            flex: 1,
            margin: 5
        },
        {
            xtype:'rallybutton',
            text: 'Post',
            disabled: !can_post,
            toolTipText: tooltip_text,
            listeners: {
                scope: this,
                click: this._postComment
            }
        }
        ];
    },
    
    _postComment: function() {
        var comment_field = this.down('#comment_field');
        
        var comment = comment_field.getValue();
        if ( Ext.isEmpty(comment) || Ext.isEmpty(Ext.String.trim(comment)) ) {
            return;
        }
        
        comment_field.setValue('');
        
        var current_user = Rally.getApp().getContext().getUser();

        var value = {
            text: comment,
            user: { 
                _type: 'User', 
                '_ref': current_user._ref, 
                '_refObjectName': current_user._refObjectName,
                'ObjectID': current_user.ObjectID
            }
        };
        
        var key = Ext.String.format("{0}.{1}",
            this.keyPrefix,
            Ext.util.Format.date( new Date(), 'time' )
        );
        
        this._makePreference(key,Ext.JSON.encode(value)).then({
            scope: this,
            success: function(results) {
                Ext.Array.push(this.preferences, results);
                this.buildGrid();
            },
            failure: function(msg) {
                Ext.Msg.alert("Cannot Create Comment", msg);
            }
        });
    },
    
    _makePreference: function(key,value) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {

                var pref_config = {
                    Name: key,
                    Value: value,
                    Project: TSUtilities.getEditableProjectForCurrentUser()
                }

                var pref = Ext.create(model, pref_config);
                
                pref.save({
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            me.fireEvent('commentAdded',this,result);
                            deferred.resolve([result]);
                        } else {
                            deferred.reject(operation.error.errors[0]);
                        }
                    }
                });
            }
        });
        return deferred.promise;
    }
    
});
Ext.define('Rally.technicalservices.grid.comments.RowActionColumn', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.tscommentrowactioncolumn',
    
    /**
     * @property {Boolean} sortable False to disable sorting of this column
     *
     */
    sortable: false,
    /**
     * @property {Boolean} hideable False to disable hiding of column
     *
     */
    hideable: false,
    /**
     * @property {Boolean} resizable False to disable resizing of column
     *
     */
    resizable: false,
    /**
     * @property {Boolean} draggable False to disable reordering of a column
     *
     */
    draggable: false,
    /**
     * @property {Boolean} menuDisabled True to disable the column header menu containing sort/hide options
     *
     */
    menuDisabled: true,
    /**
     * @property {Number}
     *
     */
    flex: -1,
    minWidth: Ext.isIE9 ? 22 : 26,
    maxWidth: Ext.isIE9 ? 22 : 26,

    /**
     * @property {Boolean}
     * This column should not show up on print pages that include a printable grid
     */
    printable: false,

    tdCls: 'rally-cell-row-action',
    cls: 'row-action-column-header',

    config: {
        /**
         * @cfg {Function} rowActionsFn
         * A list of Rally.ui.menu.Menu#items objects that will be used as the row action options
         * Each row action can contain a predicate property which will be evaluated to see if the row action should be included
         * Usage:
         *  rowActionsFn: function(record) {
         *      return [
         *           {text: 'Remove', record: record, handler: function(){ console.log('record:', this.record); } }
         *      ]
         *   }
         */
        rowActionsFn: null,

        /**
         * @cfg {Object} scope The scope that the rowActionsFn is called with
         */
        scope: null,
        
        canUnlock: false
    },

    constructor: function() {
        this.callParent(arguments);
        this.renderer = this._renderGearIcon;
    },

    initComponent: function() {
        this.callParent(arguments);
        this.on('click', this._showMenu, this);
    },

    onDestroy: function() {
        if (this.menu) {
            this.menu.destroy();
            delete this.menu;
        }

        this.callParent(arguments);
    },

    /**
     * @private
     * @param value
     * @param metaData
     * @param record
     */
    _renderGearIcon: function(value, metaData, record) {
        metaData.tdCls = Rally.util.Test.toBrowserTestCssClass('row-action', Rally.util.Ref.getOidFromRef(record.get('_ref')));
        return '<div class="row-action-icon icon-gear"/>';
    },

    /**
     * @private
     * @param view
     * @param el
     */
    _showMenu: function(view, el) {
        var selectedRecord = view.getRecord(Ext.fly(el).parent("tr")),
            checkedRecords = view.getSelectionModel().getSelection(),
            grid = view.panel,
            defaultOptions;

        defaultOptions = {
            view: view,
            record: selectedRecord,
            records: checkedRecords,
            owningEl: el.parentElement,
            popoverPlacement: ['bottom', 'top'],
            canUnlock: this.canUnlock
        };

        if (this.rowActionsFn) {
            var config = Ext.apply({
                items: this.rowActionsFn.call(this.scope || this, selectedRecord, view)
            }, defaultOptions);
            
            this.menu = Ext.create('Rally.ui.menu.Menu', config);
        } else {
            this.menu = this._getDefaultRecordMenu(selectedRecord, defaultOptions);
        }

        this.menu.showBy(Ext.fly(el).down(".row-action-icon"));
    },

    _getDefaultRecordMenu: function(selectedRecord, defaultOptions) {
        var menu;
        var menuOptions = Ext.merge(defaultOptions, this.menuOptions || {});
        return Ext.create('Rally.technicalservices.RecordMenu', menuOptions);
    }
});
Ext.define('Rally.technicalservices.CommentButton',{
    extend: 'Rally.ui.Button',
    requires: [
        'TSUtilities',
        'TSDateUtils',
        'Rally.technicalservices.CommentDialog'
    ],
    
    alias: 'widget.tscommentbutton',
    
    config: {
        keyPrefix: null
    },
    
    constructor:function (config) {
        this.mergeConfig(config);
        if ( Ext.isEmpty(this.config.keyPrefix) ) {
            throw "keyPrefix is required for the Comment Button";
        }

        this.config.text = Ext.String.format("<span class='icon-comment'>{0}</span>", config.text || "");
        
        this.callParent([this.config]);
    },
    
    afterRender: function() {
        this.callParent(arguments);

        this.setDisabled(true);
        
        this._getComments().then({
            scope: this,
            success: function(results) {
                this.comments = results;
                this._setResultCount();
                
                this.mon(this.el, this.clickEvent, this._showDialog, this);
                this.setDisabled(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading comments', msg);
            }
        });
    },
    
    _setResultCount: function() {
        var count = this.comments.length;
        var text = "";
        if ( count === 0 ) {
            text = Ext.String.format("<span class='icon-comment'>{0}</span>", "");
        } else {
            text = Ext.String.format("<span class='icon-comment'></span> {0}", count);
        }
        this.setText(text);
    },
    
    _getComments: function() {
        var key = this.keyPrefix;
        
        var config = {
            model:'Preference',
            filters: [{property:'Name',operator:'contains', value:key}],
            fetch: ['Name','Value','CreationDate']
        };
        
        return TSUtilities.loadWsapiRecords(config);
    },
    
    _showDialog: function() {
        Ext.create('Rally.technicalservices.CommentDialog',{
            autoShow: true,
            keyPrefix: this.keyPrefix,
            preferences: this.comments,
            listeners: {
                scope: this,
                commentAdded: function(dialog,comment) {
                    this.comments = Ext.Array.merge(this.comments,comment);
                    this._setResultCount();
                },
                commentRemoved: function(dialog, comment) {
                    this.comments = Ext.Array.remove(this.comments,comment);
                    this._setResultCount();
                }
            }
        });
    }
});
Ext.define('Rally.technicalservices.TimeModelBuilder',{
    singleton: true,

    deploy_field: 'c_IsDeployed',
    
    days: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
    
    build: function(modelType, newModelName) {
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: modelType,
            scope: this,
            success: function(model) {
                var base_fields = model.getFields();
                
                var related_fields = [
                    { name: '__TimeEntryItem', type:'object' },
                    { name: '__Feature',   type: 'object' },
                    { name: '__Release',   type: 'object' },
                    { name: '__Product',   type: 'object' },
                    { name: '__Total',     type: 'float', defaultValue: 0 },
                    { name: '__SecretKey', type:'auto', defaultValue: 1 },
                    { name: '_ReleaseLockFieldName',  type:'string', defaultValue: Rally.technicalservices.TimeModelBuilder.deploy_field }

                ];
                
                var day_fields = this._getDayFields();
                
                var all_fields = Ext.Array.merge(base_fields, day_fields, related_fields);
                
                var new_model = Ext.define(newModelName, {
                    extend: 'Ext.data.Model',
                    fields: all_fields,
                    addTimeEntryValue: this._addTimeEntryValue,
                    _updateTotal: this._updateTotal,
                    _days: this.days,
                    save: this._save,
                    getField: this.getField,
                    clearAndRemove: this.clearAndRemove,
                    isLocked: this._isLocked
                });
                
                this.model = new_model;
                
                deferred.resolve(new_model);
            }
        });
        return deferred;
    },
    
    getFetchFields: function() {
        return [ 'ObjectID', 'Name', 'Release', 'User', 'UserName', this.deploy_field ];
    },
    
    _isLocked: function (fieldName, newValue) {
        var release = this.get('__Release');
        var lock_field_name = this.get('_ReleaseLockFieldName');
                
        if ( Ext.isEmpty(release) || Ext.isEmpty(lock_field_name) ) {
            return false;
        }
        
        return release[lock_field_name];
    },
    
    clearAndRemove: function() {
        var timeentryitem = this.get('__TimeEntryItem');
        var cells_to_clear = ['__Monday','__Tuesday','__Wednesday','__Thursday','__Friday','__Saturday','__Sunday','__Total'];
        Ext.Array.each(cells_to_clear, function(cell_to_clear){
            this.set(cell_to_clear,0);
        },this);
        if ( ! Ext.isEmpty(timeentryitem)){
            timeentryitem.destroy();
        }
        this.destroy();
    },
    
    _save: function(v) { 
        var me = this;
        var changes = this.getChanges();
        Ext.Object.each(changes, function(field_name, value) {
            var row = this;
            var field = row.getField(field_name);
            var src_field_name = field.__src;
            
            if ( ! Ext.isEmpty(src_field_name) ) {
                // this is a field that belongs to another record
                var src = this.get(src_field_name);
                if ( !Ext.isEmpty(src) ) {
                    // the other record exists
                    src.set('Hours', value);
                    // TODO: check for errors on return 
                    src.save();
                    me._updateTotal();
                } else {
                    // need to create a new record
                    var time_entry_item = this.get('__TimeEntryItem');
                    var index = field.__index;
                    var week_start = time_entry_item.get('WeekStartDate');
                    var date_val = Rally.util.DateTime.add(week_start, 'day', index);
                    
                    Rally.data.ModelFactory.getModel({
                        type: 'TimeEntryValue',
                        scope: this,
                        success: function(tev_model) {
                            var fields = tev_model.getFields();
                            Ext.Array.each(fields, function(field) {
                                if ( field.name == "TimeEntryItem" || field.name == "DateVal") {
                                    field.readOnly = false;
                                    field.persist = true;
                                }
                            });
                            src = Ext.create(tev_model,{
                                Hours: value,
                                TimeEntryItem: { _ref: time_entry_item.get('_ref') },
                                DateVal: date_val
                            });
                            
                            src.save({
                                callback: function(result, operation) {
                                    if(operation.wasSuccessful()) {
                                        row.set(src_field_name, result);
                                        me._updateTotal();
                                    }
                                }
                            });
                        }
                    });
                }
            }
        },this);
    },
    getField: function(field_name) {
        var fields = this.fields.items;
        var field = null;
        
        Ext.Array.each(fields, function(f) {
            if ( f.name == field_name || f.displayName == field_name ) {
                field = f;
            }
        });
        return field;
    },
    
    _updateTotal: function() {
        var total = 0;
        Ext.Array.each(this._days, function(day){
            var value = this.get(Ext.String.format('__{0}',day)) || 0;
            total += value;
        },this);
        this.set('__Total', total);
    },
    
    _addTimeEntryValue: function(value_item) {
        var value_day = value_item.get('DateVal').getUTCDay();
        var value_hours = value_item.get('Hours');
        
        var value_day_name = Rally.technicalservices.TimeModelBuilder.days[value_day];
        
        var day_number_field_name = Rally.technicalservices.TimeModelBuilder._getDayNumberFieldName(value_day_name);
        var day_record_field_name = Rally.technicalservices.TimeModelBuilder._getDayRecordFieldName(value_day_name);
        
        this.set(day_number_field_name, value_hours);
        this.set(day_record_field_name, value_item);
        
        this._updateTotal();
        
        // don't try to write these back when we're first getting them out of the system
        this.dirty = false;
        this.modified = [];
    },
    
    _getDayNumberFieldName: function(day_name) {
        return Ext.String.format('__{0}',day_name);
    },
    
    _getDayRecordFieldName: function(day_name) {
        return Ext.String.format('__{0}_record',day_name);
    },
    
    _getDayFields: function() {
        var me = this;
        
        var day_number_fields =  Ext.Array.map(this.days, function(day,idx) {
            return {
                name: me._getDayNumberFieldName(day),
                type: 'auto',
                defaultValue: 0,
                __src: me._getDayRecordFieldName(day),
                __index: idx
            }
        });
        
        var day_record_fields =  Ext.Array.map(this.days, function(day) {
            return {
                name: me._getDayRecordFieldName(day),
                type: 'object',
                defaultValue: null
            }
        });
        
        return Ext.Array.merge(day_number_fields, day_record_fields);
        
    }
});
Ext.override(Rally.ui.grid.plugin.Validation,{
    _onBeforeEdit: function(editor, object, eOpts) {
        // clear this because it won't let us do the getEditor on cells
    }
});

/**
 */
 
 Ext.define('Rally.technicalservices.TimeTable', {
    extend: 'Ext.Container',
    alias: 'widget.tstimetable',
    
    logger: new Rally.technicalservices.Logger(),

    rows: [],
    
    /**
     * @property {String} cls The base class applied to this object's element
     */
    cls: "tstimetable",

    time_entry_item_fetch: ['WeekStartDate','WorkProductDisplayString','WorkProduct','Task',
        'TaskDisplayString','Feature','Project', 'ObjectID', 'Name', 'Release'],
        
    config: {
        startDate: null,
        editable: true,
        timesheet_user: null,
        timesheet_status: null,
        manager_field: null
    },
    
    constructor: function (config) {
        this.mergeConfig(config);
        
        if (Ext.isEmpty(config.startDate) || !Ext.isDate(config.startDate)) {
            throw "Rally.technicalservices.TimeTable requires startDate parameter (JavaScript Date)";
        }
        this.callParent([this.config]);
    },

    initComponent: function () {
        var me = this;
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {Rally.technicalservices.TimeTable} this
             * @param {Rally.ui.grid.Grid} grid
             */
            'gridReady'
        );
        
        this.startDateString = TSDateUtils.getBeginningOfWeekISOForLocalDate(this.startDate, true);

        this.logger.log("Week Start: ", this.startDate, this.startDateString );
        
        Rally.technicalservices.TimeModelBuilder.build('TimeEntryItem','TSTableRow').then({
            scope: this,
            success: function(model) {
                this._updateData();
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem creating model', msg);
            }
        });
    },
    
    _updateData: function() {
        this.setLoading('Loading time...');

        Deft.Chain.sequence([
            this._loadTimeEntryItems,
            this._loadTimeEntryValues
        ],this).then({
            scope: this,
            success: function(results) {
                var time_entry_items  = results[0];
                var time_entry_values = results[1];
                
                var rows = Ext.Array.map(time_entry_items, function(item){
                    var product = item.get('Project');

                    var workproduct = item.get('WorkProduct');
                    var feature = null;
                    var release = null;
                    
                    if ( !Ext.isEmpty(workproduct) ) {
                        product = workproduct.Project;
                        if ( workproduct.Feature ) {
                            feature = workproduct.Feature;
                            product = feature.Project;
                        }
                    }
                    
                    if ( !Ext.isEmpty(workproduct) && workproduct.Release ) {
                        release = workproduct.Release;
                    }
                    
                    var data = {
                        __TimeEntryItem:item,
                        __Feature: feature,
                        __Product: product,
                        __Release: release
                    };
                    
                    return Ext.create('TSTableRow',Ext.Object.merge(data, item.getData()));
                });
                
                var rows = this._addTimeEntryValues(rows, time_entry_values);
                
                this.logger.log('TEIs:', time_entry_items);
                this.logger.log('Rows:', rows);

                this.rows = rows;
                this._makeGrid(rows);
                this.setLoading(false);
            }
        });
        
    },
    
    _addTimeEntryValues: function(rows, time_entry_values) {
        var rows_by_oid = {};
        
        Ext.Array.each(rows, function(row) { rows_by_oid[row.get('ObjectID')] = row; });
        
        Ext.Array.each(time_entry_values, function(value){
            var parent_oid = value.get('TimeEntryItem').ObjectID;

            var row = rows_by_oid[parent_oid];
            row.addTimeEntryValue(value);
        });
        
        return rows;
    },
    
    _loadTimeEntryItems: function() {
        this.setLoading('Loading time entry items...');

        var user_oid = Rally.getApp().getContext().getUser().ObjectID;
        if ( !Ext.isEmpty(this.timesheet_user) ) {
            user_oid = this.timesheet_user.ObjectID;
        }

        var config = {
            model: 'TimeEntryItem',
            context: {
                project: null
            },
            fetch: Ext.Array.merge(Rally.technicalservices.TimeModelBuilder.getFetchFields(), 
                this.time_entry_item_fetch,
                [this.manager_field]
            ),
            filters: [
                {property:'WeekStartDate',value:this.startDateString},
                {property:'User.ObjectID',value:user_oid}
            ]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    },
    
    _loadTimeEntryValues: function() {
        this.setLoading('Loading time entry values...');
        
        var user_oid = Rally.getApp().getContext().getUser().ObjectID;
        if ( !Ext.isEmpty(this.timesheet_user) ) {
            user_oid = this.timesheet_user.ObjectID;
        }
        
        var config = {
            model: 'TimeEntryValue',
            context: {
                project: null
            },
            fetch: ['DateVal','Hours','TimeEntryItem','ObjectID'],
            filters: [
                {property:'TimeEntryItem.WeekStartDate',value:this.startDateString},
                {property:'TimeEntryItem.User.ObjectID',value:user_oid}
            ]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    },
    
    _makeGrid: function(rows) {
        this.removeAll();

        var table_store = Ext.create('Rally.data.custom.Store',{
            model: 'TSTableRow',
            groupField: '__SecretKey',
            data: rows
        });
                
        
        var me = this;
                
        this.grid = this.add({ 
            xtype:'rallygrid', 
            store: table_store,
            columnCfgs: this._getColumns(),
            showPagingToolbar : false,
            showRowActionsColumn : false,
            sortableColumns: false,
            disableSelection: true,
            enableColumnMove: false,
            viewConfig: {
                listeners: {
                    itemupdate: function(row, row_index) {
                        //me.logger.log('itemupdate', row);
                    },
                    viewready: me._addTooltip
                }
            },
            features: [{
                ftype: 'groupingsummary',
                startCollapsed: false,
                hideGroupedHeader: true,
                groupHeaderTpl: ' ',
                enableGroupingMenu: false
            }]
        });
        
        this.fireEvent('gridReady', this, this.grid);
        
    },
    
    _addTooltip: function(view) {
        this.toolTip = Ext.create('Ext.tip.ToolTip', {
            target: view.el,
            delegate: view.cellSelector,
            trackMouse: true,
            renderTo: Ext.getBody(),
            listeners: {
                beforeshow: function(tip) {

                    var trigger = tip.triggerElement,
                        parent = tip.triggerElement.parentElement,
                        columnTitle = view.getHeaderByCell(trigger).text,
                        columnDataIndex = view.getHeaderByCell(trigger).dataIndex;
                    var record = view.getRecord(parent);
                    if ( !record ) {
                        return false;
                    }
                    
                    var columnText = null;
                    var value = record.get(columnDataIndex);
                    
                    if ( columnTitle == "Work Product" ) {
                        columnText = value.Project._refObjectName;
                    }
                    
                    if (!Ext.isEmpty(columnText)){
                        tip.update("<b>Project:</b> " + columnText);
                    } else {
                        return false;
                    }
                }
            }
        });
    },
    
    addRowForItem: function(item) {
        var me = this;

        if ( !this._hasRowForItem(item)) {
            var item_type = item.get('_type');

            Rally.data.ModelFactory.getModel({
                type: 'TimeEntryItem',
                scope: this,
                success: function(model) {
                    var fields = model.getFields();

                    var _ref = item.get('_ref');
                    
                    var config = {
                        WorkProduct: { _ref: _ref },
                        WeekStartDate: this.startDateString
                    };
                    
                    if ( item.get('Project') ) {
                        config.Project = item.get('Project');
                    }
                    
                    if ( item_type == "task" ) {
                        config.Task = { _ref: _ref };
                        config.WorkProduct = { _ref: item.get('WorkProduct')._ref };
                    }
                    
                    var time_entry_item = Ext.create(model,config);
                    
                    var fetch = Ext.Array.merge(Rally.technicalservices.TimeModelBuilder.getFetchFields(), this.time_entry_item_fetch);

                    time_entry_item.save({
                        fetch: fetch,
                        callback: function(result, operation) {
                            if(operation.wasSuccessful()) {
                                var product = result.get('Project');
                                var workproduct = result.get('WorkProduct');
                                var feature = null;
                                var release = null;
                                
                                if ( !Ext.isEmpty(workproduct) && workproduct.Feature ) {
                                    feature = workproduct.Feature;
                                    product = feature.Project;
                                }
                                                                
                                if ( !Ext.isEmpty(workproduct) && workproduct.Release ) {
                                    release = workproduct.Release;
                                }
                                                                
                                var data = {
                                    __TimeEntryItem:result,
                                    __Feature: feature,
                                    __Product: product,
                                    __Release: release
                                };
                                
                                var row = Ext.create('TSTableRow',Ext.Object.merge(data, time_entry_item.getData()));
                                me.grid.getStore().loadRecords([row], { addRecords: true });
                                me.rows.push(row);
                            }
                        }
                    });
                }
            });
        }
    },
    
    _hasRowForItem: function(item) {
        var item_type = item.get('_type');
        
        var hasRow = false;
        var rows = [];
        var store_count = this.grid.getStore().getTotalCount();
        
        for ( var i=0; i<store_count; i++ ) {
            rows.push(this.grid.getStore().getAt(i));
        }
        
        Ext.Array.each(rows, function(row) {
            if ( row ) { // when clear and remove, we get an undefined row
                if ( item_type == "task" ) {
                    if ( row.get('Task') && row.get('Task')._ref == item.get('_ref') ) {
                        hasRow = true;
                    }
                } else {
                    if ( Ext.isEmpty(row.get('Task')) && row.get('WorkProduct') && row.get('WorkProduct')._ref == item.get('_ref') ) {
                        hasRow = true;
                    }
                }
            }
        });
        
        return hasRow;
    },
    
    _getColumns: function(task_states) {
        var me = this;
                
        var columns = [];
        
        if ( this.editable ) {
            columns.push({
                xtype: 'tsrowactioncolumn'
            });
        }
            
        Ext.Array.push(columns, [
            {
                dataIndex: '__TimeEntryItem',
                text: 'User',
                editor: null,
                hidden: true,
                renderer: function(value) {
                    return value.get('User').UserName;
                }
            },
            {
                dataIndex: '__TimeEntryItem',
                text: 'Week Start',
                editor: null,
                hidden: true,
                renderer: function(value) {
                    return value.get('WeekStartDate');
                }
            },
            {
                dataIndex: '__Product',
                text: 'Locked',
                editor: null,
                hidden: true,
                renderer: function(value, meta, record) {

                    return record.isLocked() || false;
                }
            }]);
            
        if ( me.manager_field ) {
            columns.push({
                dataIndex:'__TimeEntryItem', 
                text:'Manager', 
                align: 'center',
                hidden: true,
                renderer: function(value) {
                    
                    return value.get('User')[me.manager_field] || "none"; 
                }
            });
        }
        if ( me.timesheet_status || me.timesheet_status === false ) {
            Ext.Array.push(columns,[{
                dataIndex: '__Product',
                text: 'Status',
                renderer: function(v) { return me.timesheet_status; }
            }]);
        }
        
        Ext.Array.push(columns, [
            {
                dataIndex: '__Product',
                text: 'Product',
                flex: 1,
                editor: null,
                renderer: function(value,meta,record) {
                    if ( record.isLocked() ) {
                        return "<span class='icon-lock'> </span>" + value._refObjectName;
                    }

                    return value._refObjectName;
                },
                exportRenderer: function(value,meta,record) {
                    return value._refObjectName
                },
                summaryRenderer: function() {
                    return "Totals";
                }
            },
            {
                dataIndex: '__Feature',
                text:  'Feature',
                flex: 1,
                editor: null,
                renderer: function(value) {
                    if ( Ext.isEmpty(value) ) { return ""; }
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(value),
                        value._refObjectName
                    );;
                },
                exportRenderer: function(value,meta,record) {
                    if ( Ext.isEmpty(value) ) { return ""; }
                    return value._refObjectName
                }
            },
            {
                dataIndex: 'WorkProduct',
                text:  'Work Product',
                flex: 1,
                editor: null,
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) ) {
                        return record.get('WorkProductDisplayString');
                    }
                    
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(value),
                        record.get('WorkProductDisplayString')
                    );
                },
                exportRenderer: function(value,meta,record) {
                    return record.get('WorkProductDisplayString')
                }
            },
            {
                dataIndex: '__Release',
                text: 'Release',
                flext: 1,
                editor: null,
                renderer: function(v) {
                    if ( Ext.isEmpty(v) ) { return ""; }
                    return v._refObjectName;
                }
            },
            {
                dataIndex: 'Task',
                text:  'Task',
                flex: 1,
                editor: null,
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) ) {
                        return record.get('TaskDisplayString');
                    }
                    
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(value),
                        record.get('TaskDisplayString')
                    );
                },
                exportRenderer: function(value,meta,record) {
                    return record.get('TaskDisplayString')
                }
            }
        ]);
        
        var day_width = 50;
        
        var editor_config = function(record,df){
            var config = {
                xtype:'rallynumberfield',
                minValue: 0,
                maxValue: 24,
                selectOnFocus: true,
                listeners: {
                    change: function(field, new_value, old_value) {
                        if ( Ext.isEmpty(new_value) ) {
                            field.setValue(0);
                        }
                    }
                }
            };
            
            if( ( !Ext.isEmpty(record) && record.isLocked() ) || ! me.editable ){
                return false;
            } 
            
            return config;
        };
       
        if ( ! this.editable ) {
            editor_config = null;
        }
        
        var weekend_renderer = function(value, meta, record) {
            meta.tdCls = "ts-weekend-cell";
            return value;
        };
        var total_renderer = function(value, meta, record) {
            meta.tdCls = "ts-total-cell";
            return value;
        }; 
        
        columns.push({dataIndex:'__Sunday',   width: day_width, text:'Sun',   align: 'center',
            getEditor: editor_config, summaryType: 'sum', renderer: weekend_renderer});
        columns.push({dataIndex:'__Monday',   width: day_width, text:'Mon',   align: 'center',
            getEditor: editor_config, summaryType: 'sum'});
        columns.push({dataIndex:'__Tuesday',  width: day_width, text:'Tue',   align: 'center',
            getEditor: editor_config, summaryType: 'sum'});
        columns.push({dataIndex:'__Wednesday',width: day_width, text:'Wed',   align: 'center',
            getEditor: editor_config, summaryType: 'sum'});
        columns.push({dataIndex:'__Thursday', width: day_width, text:'Thur',  align: 'center',
            getEditor: editor_config, summaryType: 'sum'});
        columns.push({dataIndex:'__Friday',   width: day_width, text:'Fri',   align: 'center',
            getEditor: editor_config, summaryType: 'sum'});
        columns.push({dataIndex:'__Saturday', width: day_width, text:'Sat',   align: 'center',
            getEditor: editor_config, summaryType: 'sum', renderer: weekend_renderer});
        columns.push({dataIndex:'__Total',    width: day_width, text:'Total', align: 'center',
            editor: null,summaryType: 'sum', renderer: total_renderer});

        
        return columns;
    },
    
    getGrid: function() {
        return this.down('rallygrid');
    }

});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

var TSTimesheetFinanceCalculators = {
    calculateWeekNumber: function(value, record) {
        var week_date = record.get('DateVal');
        
        if ( !Ext.isDate(week_date) ) {
            return -1;
        }
        
        var offset = week_date.getTimezoneOffset();
        // 480 is pacific, -330 is india
        // datevals are set to the london midnight for that day, so shifting to pacific
        // will put Tuesday on Monday, but India will be fine for week day
        var shifted_week_date = week_date;
        // ISO-8601 has week number starting on Monday,
        // shift 24 hours to get to start on Tuesday
        if ( offset > 0 ) {
            shifted_week_date = Rally.util.DateTime.add(week_date,'minute',offset+1440);
        } else {
            shifted_week_date = Rally.util.DateTime.add(week_date,'minute',1440);
        }
        
        //console.log(offset, week_date, shifted_week_date);
        
        return parseInt( Ext.Date.format(shifted_week_date, 'W', 10) );
    }
};

Ext.define('TSTimesheetFinanceRow',{
    extend: 'Ext.data.Model',
    
    fields: [
        { name: '__WorkItem', type:'object' },
        { name: '__WorkItemDisplay', type:'string' },
        { name: 'User', type: 'object' },
        { name: '__Location', type:'string' },
        { name: '__AssociateID', type:'string' },
        { name: '__EmployeeType', type:'string' },
        { name: '__CostCenter', type: 'string' },
        { name: '__Status', type: 'object' },
        { name: '__LastUpdateBy', type: 'object' },
        { name: '__LastUpdateDate', type: 'date' },
        { name: '__Task', type:'object' },
        { name: '__IsOpEx', type: 'boolean', defaultValue: false },
        { name: 'WeekStartDate', type: 'date' },
        { name: '__Product', type:'object' },
        { name: '__Release', type: 'object' },
        { name: 'DateVal', type: 'date' },
        { name: 'Hours', type: 'float' },
        
        /* calculated fields */
        { name: '___WeekNumber', type:'int', defaultValue: -1, convert:  TSTimesheetFinanceCalculators.calculateWeekNumber }
    ],
    
    getPreferenceKey: function() {
        // get or create and then update pref
        return Ext.String.format("{0}.{1}.{2}", 
            this._approvalKeyPrefix,
            TSDateUtils.getBeginningOfWeekISOForLocalDate(this.get('WeekStartDate')),
            this.get('User').ObjectID
        );
    }
    
});
Ext.define('TSTimesheet',{
    extend: 'Ext.data.Model',
    
    _approvalKeyPrefix: 'rally.technicalservices.timesheet.status',
    
    fields: [
        { name: '__UserName', type:'object' },
        { name: '__Hours',  type: 'float',  defaultValue: 0 },
        { name: '__Status', type: 'string', defaultValue: 'Unknown' }, // Open, Approved, Locked
        { name: 'User', type: 'object' },
        { name: 'WeekStartDate', type: 'date' },
        { name: '__LastUpdateBy', type: 'object' },
        { name: '__LastUpdateDate', type: 'date' },
        { name: '__TimeEntryItems', type: 'object' },
        { name: '__TimeEntryValues', type: 'object' }
    ],
    
    isSelectable: function() {
        return true;
    },
    
    getWeekStart: function() {
        var start_date = new Date(this.get('WeekStartDate'));
        start_date = Rally.util.DateTime.toIsoString(
            new Date(start_date.getUTCFullYear(), 
                start_date.getUTCMonth(), 
                start_date.getUTCDate(),  
                start_date.getUTCHours(), 
                start_date.getUTCMinutes(), 
                start_date.getUTCSeconds()
            )
        ).replace(/T.*$/,'');
        return start_date;
    },
    
    getPreferenceKey: function() {
        // get or create and then update pref
        return Ext.String.format("{0}.{1}.{2}", 
            this._approvalKeyPrefix,
            this.getWeekStart(),
            this.get('User').ObjectID
        );
    }
    
});
Ext.define("TSFinanceReport", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
defaults: { margin: 10 },
    
    layout: 'border', 
    
    stateFilterValue: 'ALL',
    
    items: [
        {xtype:'container', itemId:'selector_box', region: 'north',  layout: { type:'hbox' }},
        {xtype:'container', itemId:'display_box' , region: 'center', layout: { type: 'fit'} }
    ],

    _approvalKeyPrefix: 'rally.technicalservices.timesheet.status',

    integrationHeaders : {
        name : "TSFinanceReport"
    },
    
    config: {
        defaultSettings: {
            managerField: 'DisplayName'
        }
    },
    
    launch: function() {
        this._addSelectors(this.down('#selector_box'));
    },
    
    _addSelectors: function(container) {
        container.removeAll();
                
        var date_container = container.add({
            xtype:'container',
            layout: 'vbox'
        });
        
        var week_start = this._getBeginningOfWeek(Rally.util.DateTime.add(new Date(), 'week', -4));
        
        date_container.add({
            xtype:'rallydatefield',
            itemId:'from_date_selector',
            fieldLabel: 'From',
            labelWidth: 50,
            value: week_start,
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    this._enableGoButton();
                }
            }
        });
        
        date_container.add({
            xtype:'rallydatefield',
            itemId:'to_date_selector',
            fieldLabel: 'Through',
            labelWidth: 50,
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    this._enableGoButton();
                }
            }
        }).setValue(new Date());
        
        container.add({
            xtype:'rallybutton',
            itemId: 'go_button',
            text:'Go',
            margin: '15 3 3 3',
            disabled: false,
            listeners: {
                scope: this,
                click: this._updateData
            }
        });
        
        var spacer = container.add({ xtype: 'container', flex: 1});
        
        container.add({
            xtype:'rallybutton',
            itemId:'export_button',
            text: '<span class="icon-export"> </span>',
            disabled: false,
            listeners: {
                scope: this,
                click: function() {
                    this._export();
                }
            }
        });
        
        if ( this.isExternal() ) {
            container.add({type:'container', html: '......'});
        }
        
    },
    
    _enableGoButton: function() {
        var start_calendar = this.down('#from_date_selector');
        var to_calendar    = this.down('#to_date_selector');
        
        var go_button = this.down('#go_button');
        
        go_button && go_button.setDisabled(true);
        
        if ( start_calendar && to_calendar ) {
            go_button && go_button.setDisabled(false);
        }

    },
    
    _updateData: function() {
        this.down('#display_box').removeAll();
        var go_button = this.down('#go_button');
        
        go_button && go_button.setDisabled(true);
        
        Deft.Chain.pipeline([
            this._loadTimesheets,
            this._loadPreferences
        ],this).then({
            scope: this,
            success: function(timesheets) {
                var time_rows = this._getRowsFromTimesheets(timesheets);
                this._addGrid(this.down('#display_box'), time_rows);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading users with timesheets', msg);
            }
        });
    },
    
    _loadTimesheets: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        this.setLoading("Loading timesheets...");
        
        var tei_filters = [{property:'ObjectID', operator: '>', value: 0 }];
        var tev_filters = [{property:'ObjectID', operator: '>', value: 0 }];
        
        if (this.down('#from_date_selector') ) {
            var selector_start_date = this.down('#from_date_selector').getValue();
            
            var tei_start_date = TSDateUtils.getBeginningOfWeekISOForLocalDate(selector_start_date,true);
            var tev_start_date = Rally.util.DateTime.toIsoString(selector_start_date ,false).replace(/T.*$/,'T00:00:00.000Z');
            tei_filters.push({property:'WeekStartDate', operator: '>=', value:tei_start_date});
            tev_filters.push({property:'DateVal', operator: '>=', value:tev_start_date});
        }
        
        if (this.down('#to_date_selector') ) {
            var end_date = TSDateUtils.formatShiftedDate( this.down('#to_date_selector').getValue(), 'Y-m-d');
            tei_filters.push({property:'WeekStartDate', operator: '<=', value:end_date});
            tev_filters.push({property:'DateVal', operator: '<=', value:end_date});
        }
        
        var teitem_config = {
            model:'TimeEntryItem',
            limit: 'Infinity',
            filters: tei_filters,
            context: {
                project: null
            },
            fetch: ['WeekStartDate','ObjectID','UserName','Project','WorkProduct','WorkProductString',
                'User','OfficeLocation','NetworkID','c_EmployeeType','CostCenter'
            ]
        };
        
        var tevalue_config = {
            model:'TimeEntryValue',
            limit: 'Infinity',
            filters: tev_filters,
            context: {
                project: null
            },
            fetch: ['WeekStartDate','ObjectID','DateVal','Hours',
                'TimeEntryItem','WorkProduct', 'WorkProductDisplayString',
                'User','Project','Feature',
                'Release','c_DecommissionDate','State','c_DeploymentDate',
                'Task','TaskDisplayString','c_ActivityType','c_ProjectActivityType'
            ]
        };
        
        Deft.Chain.sequence([
            function() { return TSUtilities.loadWsapiRecordsWithParallelPages(teitem_config);  },
            function() { return TSUtilities.loadWsapiRecordsWithParallelPages(tevalue_config); }
        ],this).then({
            scope: this,
            success: function(results) {
                var time_entry_items  = results[0];
                var time_entry_values = results[1];
                
                var timesheets = this._getTimesheetsFromTimeEntryItems(time_entry_items);
                timesheets = this._addTimeValuesToTimeSheets(timesheets,time_entry_values);
                
                deferred.resolve( Ext.Array.map(Ext.Object.getValues(timesheets), function(timesheet){
                    return Ext.create('TSTimesheet',timesheet);
                }));
                
                this.setLoading(false);
                
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _loadPreferences: function(timesheets) {
        var deferred = Ext.create('Deft.Deferred');
        this.setLoading("Loading statuses...");
        
        this.logger.log("_loadPreferences", timesheets);
        
        var stateFilter = this.stateFilterValue;
        
        var filters = [{property:'Name',operator:'contains',value:this._approvalKeyPrefix}];
        
        var config = {
            model:'Preference',
            limit: Infinity,
            filters: filters,
            fetch: ['Name','Value'],
            sorters: { property:'CreationDate', direction: 'ASC' }
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(preferences) {
                var preferences_by_key = {};
                
                Ext.Array.each(preferences, function(pref){
                    var key_array = pref.get('Name').split('.');
                    if ( key_array.length > 6) {
                        key_array.pop();
                    }
                    preferences_by_key[key_array.join('.')] = pref;
                });
                
                Ext.Array.each(timesheets, function(timesheet){
                    var key = timesheet.getPreferenceKey();
                    if (preferences_by_key[key]) {
                        var status_object = Ext.JSON.decode(preferences_by_key[key].get('Value'));
                        timesheet.set('__Status', status_object.status || "Open");
                        timesheet.set('__LastUpdateBy', status_object.status_owner._refObjectName || "");
                        timesheet.set('__LastUpdateDate', status_object.status_date);
                        
                    } else { 
                        timesheet.set('__Status', 'Open');
                    }
                });
                
                var filtered_timesheets = Ext.Array.filter(timesheets, function(timesheet){
                    if (stateFilter == "ALL") {
                        return true;
                    }
                    
                    return ( timesheet.get('__Status') == stateFilter );
                });
                
                this.setLoading(false);
                deferred.resolve(filtered_timesheets);
                
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

    _getTimesheetsFromTimeEntryItems: function(time_entry_items) {
        var timesheets = { };
        Ext.Array.each(time_entry_items, function(item){
            var key = Ext.String.format("{0}_{1}",
                item.get('User').ObjectID,
                Rally.util.DateTime.toIsoString(item.get('WeekStartDate'))
            );
            
            if ( ! timesheets[key] ) {
                timesheets[key] = Ext.Object.merge( item.getData(), { 
                    __UserName: item.get('User').UserName,
                    __Hours: 0,
                    __Status: "Unknown",
                    __TimeEntryItems: []
                });
            }
            
            timesheets[key].__TimeEntryItems.push(item);
        },this);
        
        
        return timesheets;
    },
    
    _addTimeValuesToTimeSheets: function(timesheets,time_entry_values) {
        var time_entry_values_by_item_oid = {};
        
        Ext.Array.each(time_entry_values, function(value){
            var item_oid = value.get('TimeEntryItem').ObjectID;
            if ( Ext.isEmpty( time_entry_values_by_item_oid[item_oid] )) {
                time_entry_values_by_item_oid[item_oid] = [];
            }
            time_entry_values_by_item_oid[item_oid].push(value);
        });
        
        Ext.Object.each(timesheets, function(key,timesheet){
            var items = timesheet.__TimeEntryItems;
            var timesheet_values = timesheet.__TimeEntryValues;
            if ( Ext.isEmpty(timesheet_values) ) { timesheet_values = []; }
            
            Ext.Array.each(items, function(item){
                var item_oid = item.get('ObjectID');
                
                var values = time_entry_values_by_item_oid[item_oid];
                if (Ext.isArray(values)) {
                    timesheet_values = Ext.Array.push(timesheet_values,values);
                }
            });
            
            timesheet.__TimeEntryValues = timesheet_values;
        });
        
        return timesheets;
        
    },
    
    _getRowsFromTimesheets: function(timesheets){
        this.logger.log("timesheets", timesheets);
        
        var rows = [];
        Ext.Object.each(timesheets, function(key,timesheet){
            var time_values = timesheet.get('__TimeEntryValues');
            Ext.Array.each(time_values, function(time_value){
                var isOpEx = false;
                
                var product = time_value.get('TimeEntryItem').Project;
                var workproduct = time_value.get('TimeEntryItem').WorkProduct;
                var feature = null;
                var release = null;
                
                if ( !Ext.isEmpty(workproduct) && workproduct.Feature ) {
                    feature = workproduct.Feature;
                    product = feature.Project;
                }
                
                if ( !Ext.isEmpty(workproduct) && workproduct.Release ) {
                    release = workproduct.Release;
                }
                
                var task = time_value.get('TimeEntryItem').Task;
                if ( !Ext.isEmpty(task) ) {
                    if ( !Ext.isEmpty(task.c_ActivityType) && !/CapEx/.test(task.c_ActivityType) && !/^-/.test(task.c_ActivityType)) {
                        isOpEx = true;
                    }
                }
                
                if ( !Ext.isEmpty(workproduct)  ) {
                    if ( !Ext.isEmpty(workproduct.c_ActivityType) && !/CapEx/.test(workproduct.c_ActivityType) ) {
                        isOpEx = true;
                    }
                }
                
                if ( !Ext.isEmpty(feature) ) {
                    if ( !Ext.isEmpty(workproduct.c_ActivityType) && !/CapEx/.test(workproduct.c_ActivityType) ) {
                        isOpEx = true;
                    }
                }
                
                rows.push(Ext.Object.merge( time_value.getData(),{
                    WeekStartDate     : timesheet.get('WeekStartDate'),
                    User              : timesheet.get('User'),
                    __Location        : timesheet.get('User').OfficeLocation,
                    __AssociateID     : timesheet.get('User').NetworkID,
                    __EmployeeType    : timesheet.get('User').c_EmployeeType,
                    __CostCenter      : timesheet.get('User').CostCenter,
                    __Status          : timesheet.get('__Status'),
                    __LastUpdateBy    : timesheet.get('__LastUpdateBy'),
                    __LastUpdateDate  : timesheet.get('__LastUpdateDate'),
                    __Release         : release,
                    __Product         : product,
                    __IsOpEx          : isOpEx,
                    __WorkItem        : time_value.get('TimeEntryItem').WorkProduct,
                    __WorkItemDisplay : time_value.get('TimeEntryItem').WorkProductDisplayString,
                    __Task            : time_value.get('TimeEntryItem').Task,
                    __TaskDisplay     : time_value.get('TimeEntryItem').TaskDisplayString
                }));
                
            });
        });
        
        this.logger.log('rows', rows);
        
        return Ext.Array.map(rows, function(row){
            return Ext.create('TSTimesheetFinanceRow',row);
        });
    },
    
    _addGrid: function(container, timesheets) {
        this.logger.log('add grid', timesheets);
        
        var store = Ext.create('Rally.data.custom.Store',{
            data:timesheets,
            pageSize: 50000,
            model: 'TSTimesheetFinanceRow'
        });
        
        var columns = this._getColumns();
        
        container.add({
            xtype:'rallygrid',
            store: store,
            columnCfgs: columns,
            enableEditing: false,
            showRowActionsColumn: false,
            enableBulkEdit: false,
            showPagingToolbar: false
        });
    },
    
    _getColumns: function() {
        var columns = [];
        
        columns.push({dataIndex:'User',text:'User', renderer: function(v) { return v._refObjectName; }});
        columns.push({dataIndex:'__Location',text:'Location' });
        columns.push({dataIndex:'__AssociateID',text:'Associate ID' });
        columns.push({dataIndex:'__EmployeeType', text:'Employee Type' });
        columns.push({dataIndex:'__CostCenter', text:'Cost Center', exportRenderer: function(v) {
            return Ext.String.format('="{0}"', v);
        }});
        
        columns.push({dataIndex:'DateVal',text:'Work Date', align: 'center', renderer: function(v) {
            var offset = v.getTimezoneOffset();
            
            var week_date = v;
            //console.log(offset);  // 480 is pacific, -330 is india
            // datevals are set to the london midnight for that day, so shifting to pacific
            // will put Tuesday on Monday, but India will be fine for week day
            
            if ( offset > 0 ) {
                week_date = Rally.util.DateTime.add(v,'minute',offset);
            }
            
            var display_value = Ext.util.Format.date(week_date,'m/d/y');
            //console.log(v, week_date, display_value);
            
            return display_value;
        }});
        
        columns.push({dataIndex:'Hours',  text:'Actual Hours', align: 'right'});
        columns.push({dataIndex:'__Status', text:'Status', align: 'center'});
        columns.push({dataIndex:'__LastUpdateBy', text:'Status Set By', align: 'center'});
        columns.push({dataIndex:'__LastUpdateDate', text:'Status Set On', align: 'center'});
        
        columns.push({dataIndex:'__WorkItemDisplay',text:'Work Item', align: 'center'});
        columns.push({dataIndex:'__Task',text:'Category', align: 'center', renderer: function(v) {
            if ( Ext.isEmpty(v) || Ext.isEmpty(v.c_ActivityType) ) { return ""; }
            return v.c_ActivityType;
        }});
        
        columns.push({dataIndex:'__Release',text:'Release', align: 'center', renderer: function(v) {
            if ( Ext.isEmpty(v) ) { return ""; }
            return v._refObjectName;
        }});
        
        columns.push({dataIndex:'__Release',text:'Release Status', align: 'center', renderer: function(v) {
            if ( Ext.isEmpty(v) || Ext.isEmpty(v.State) ) { return ""; }
            return v.State;
        }});
        columns.push({dataIndex:'__Release',text:'Decommission Date', align: 'center', renderer: function(v) {
            if ( Ext.isEmpty(v) || Ext.isEmpty(v.c_DecommissionDate) ) { return ""; }
            return v.c_DecommissionDate;
        }});
        columns.push({dataIndex:'__Release',text:'Deployment Date', align: 'center', renderer: function(v) {
            if ( Ext.isEmpty(v) || Ext.isEmpty(v.c_DeploymentDate) ) { return ""; }
            return v.c_DeploymentDate;
        }});
        
        columns.push({dataIndex:'__Product',text:'Product', align: 'center', renderer: function(v){ return v._refObjectName; }});
        columns.push({dataIndex:'__WorkItem',text:'Work Item Project', align: 'center', renderer: function(v) {
            if ( Ext.isEmpty(v) ) {
                return "";
            }
            
            return v.Project._refObjectName;
        }});
        
        columns.push({dataIndex: '__IsOpEx', text: 'OpEx', align: 'center'});
        
        columns.push({dataIndex: '___WeekNumber', text: 'Week Number', align: 'center'});
        
        return columns;
    },
    
    _getBeginningOfWeek: function(js_date){
        var start_of_week_here = Ext.Date.add(js_date, Ext.Date.DAY, -1 * js_date.getDay());
        return start_of_week_here;
    },
//    
//    getOptions: function() {
//        return [
//            {
//                text: 'About...',
//                handler: this._launchInfo,
//                scope: this
//            }
//        ];
//    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    _export: function(){
        var grid = this.down('rallygrid');
        var me = this;
        
        if ( !grid ) { return; }
        
        this.logger.log('_export',grid);

        var filename = Ext.String.format('project-report.csv');

        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromGrid(this,grid) } 
        ]).then({
            scope: this,
            success: function(csv){
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    _filterOutExceptStrings: function(store) {
        var app = Rally.getApp();
        app.logger.log('_filterOutExceptChoices');
        
        store.filter([{
            filterFn:function(field){ 
                var attribute_definition = field.get('fieldDefinition').attributeDefinition;
                var attribute_type = null;
                if ( attribute_definition ) {
                    attribute_type = attribute_definition.AttributeType;
                }
                if (  attribute_type == "BOOLEAN" ) {
                    return false;
                }
                if ( attribute_type == "STRING") {
                    if ( !field.get('fieldDefinition').attributeDefinition.Constrained ) {
                        return true;
                    }
                }
                return false;
            } 
        }]);
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSFinanceReport', {
                   name: 'TimeSheet Finance Report'
               });
        });
    </script>
    
    <style type="text/css">

td.ts-total-cell {
    background-color: #eee !important;
}

.x-grid-row-summary {
    background-color: #eee;
}

.x-grid-row-alt .x-grid-td {
    background-color: #fff;
}

.x-border-layout-ct {
    background-color: #ffffff;
}

td.ts-weekend-cell {
    background-color: #B0E0E6 !important;
}
.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>